package com.air.yunpicturebackend.api.aliyunai.model;

import cn.hutool.core.annotation.Alias;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.io.Serializable;

/**
 * 扩图任务请求类
 * 也就是发请求，所需的请求体
 * 将文档中的参数提供给大模型，生成这样一个类
 */
@Data
public class CreateOutPaintingTaskRequest implements Serializable {

    /**
     * 模型，例如 "image-out-painting" ，这里是常量我们就使用这个大模型
     */
    private String model = "image-out-painting";

    /**
     * 输入图像信息
     */
    private Input input;

    /**
     * 图像处理参数
     */
    private Parameters parameters;

    @Data
    public static class Input {
        /**
         * 必选，图像 URL
         * 这里的 @Alias 我们用的是hutool里面的
         * 等会我们就可以传入 imageUrl 这种驼峰式的对象，然后使用hutool的json转换工具把对象转换成字符串的时候
         * 它发现有 @Alias 这个注解，就会自动把这个驼峰式转换成注解括号里面的 "image_url" 下划线的格式
         * 因为我们文档中接收的参数是下划线格式的，但是我们一般写对象字段的时候不会用下划线的格式
         * 所以这里用这个注解会更规范一些
         * 注意这里是用 hutool 的注解，因为我们等会转换成时会用hutool的json转换工具
         */
        @Alias("image_url")
        private String imageUrl;
    }

    @Data
    public static class Parameters implements Serializable {
        /**
         * 可选，逆时针旋转角度，默认值 0，取值范围 [0, 359]
         */
        private Integer angle;

        /**
         * 可选，输出图像的宽高比，默认空字符串，不设置宽高比
         * 可选值：["", "1:1", "3:4", "4:3", "9:16", "16:9"]
         */
        @Alias("output_ratio")
        private String outputRatio;

        /**
         * 可选，图像居中，在水平方向上按比例扩展，默认值 1.0，范围 [1.0, 3.0]
         */
        @Alias("x_scale")
        @JsonProperty("xScale")
        private Float xScale;

        /**
         * 可选，图像居中，在垂直方向上按比例扩展，默认值 1.0，范围 [1.0, 3.0]
         * 这里有一个非常坑的点，这两个字段返回给前端的时候，用json转换的时候，返回给前端的时候，它就是得不到值
         * 前端传递 yScale 的时候，就是设置不进来
         * 其实是因为SpringMVC默认的使用jackson转换的json，会把前端的请求的json字符串转换成我们的对象设置到对象中
         * 但是使用的这个jackson转换，它如果发现你的第二位首字母是大写，它给你生成的这个get、set方法就会有问题
         */
        @Alias("y_scale")
        @JsonProperty("yScale")
        private Float yScale;

        /**
         * 可选，在图像上方添加像素，默认值 0
         */
        @Alias("top_offset")
        private Integer topOffset;

        /**
         * 可选，在图像下方添加像素，默认值 0
         */
        @Alias("bottom_offset")
        private Integer bottomOffset;

        /**
         * 可选，在图像左侧添加像素，默认值 0
         */
        @Alias("left_offset")
        private Integer leftOffset;

        /**
         * 可选，在图像右侧添加像素，默认值 0
         */
        @Alias("right_offset")
        private Integer rightOffset;

        /**
         * 可选，开启图像最佳质量模式，默认值 false
         * 若为 true，耗时会成倍增加
         */
        @Alias("best_quality")
        private Boolean bestQuality;

        /**
         * 可选，限制模型生成的图像文件大小，默认值 true
         * - 单边长度 <= 10000：输出图像文件大小限制为 5MB 以下
         * - 单边长度 > 10000：输出图像文件大小限制为 10MB 以下
         */
        @Alias("limit_image_size")
        private Boolean limitImageSize;

        /**
         * 可选，添加 "Generated by AI" 水印，默认值 true
         * 国家要求说，ai生成的图片都要打这个水印，否则是违规的
         */
        @Alias("add_watermark")
        private Boolean addWatermark = false;
    }
}
