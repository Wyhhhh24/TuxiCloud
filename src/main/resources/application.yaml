server:
  port: 8123
  servlet:
    context-path: /api
    # cookie 30 天过期
    session:
      cookie:
        max-age: 2592000
spring:
  application:
    name: yun-picture-backend
  profiles:
    active: local
  servlet:
    multipart:
      max-file-size: 10MB  #Spring 默认上传的文件大小是 1MB，这里需要进行重新配置，开放更大的上传体积
  # session 配置
  session:
    store-type: redis
    # 30天过期
    timeout: 2592000
  # 空间图片分表
  shardingsphere:
    datasource:
      names: yun_picture  # 我们的库名
      yun_picture:  # 配置数据库的连接，和我们实际数据库配置一样，这里再配置一次
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/yun_picture
        username: root
        password: 123456
    rules:  #分库分表的规则
      sharding:
        tables:
          picture:
            actual-data-nodes: yun_picture.picture  # 动态分表，实际表的节点，我们所有的分表都要定义在实际的数据节点中
            # actual-data-nodes 一般情况下是指定一段分表的范围，比如 yun_picture.picture_${0..9999} 表示有 picture_0 ~ picture_9999 这 10000 张分表
            # 但是，ShardingSphere 在执行分表查询时会校验要查询的表（比如 picture_123456789）是否在 actual-data-nodes 的配置范围内。
            # 如果不在配置内就直接报错，都没有机会写一个逻辑把这个改掉
            # 但是由于我们的 spaceId 是长整型，范围太大，不能写一个 0~长整型最大值吧，无法通过指定范围将所有分表名称包含，导致无法通过框架内置的校验
            # 所以此处将 actual-data-nodes 就随便设置了，设置为一个逻辑表就好了
            table-strategy:
              standard:
                sharding-column: spaceId  #我们要指定分表是根据 spaceId 这一列来分表的，Picture 表就是有 spaceId 这一列，我们可以通过 spaceId 把图片存到不同的表里
                sharding-algorithm-name: picture_sharding_algorithm  # 使用自定义分片算法，下面我们就自定义实现这个算法
        sharding-algorithms:
          picture_sharding_algorithm:
            type: CLASS_BASED  #基于类来自定义算法，因为这个算法是需要我们自己写一些策略，所以基于类去实现，就不基于内置的了，内置的应该是取模啊那些
            props:
              strategy: standard  #标准策略
              algorithmClassName: com.air.yunpicturebackend.manager.sharding.PictureShardingAlgorithm  #我们要定义一个图片分表算法实现类
    props:
      sql-show: true  #开发阶段可以开启，能够打印出实际执行的 sql ，但生产环境就不开了，不然日志会特别多


  #数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/yun_picture
    username: root
    password: 123456
  #redis配置
  redis:
    host: 127.0.0.1
    port: 6379
    password: 123456
    database: 1
    timeout: 5000 #五秒没连上就报失败

mybatis-plus:
  configuration:
    # MyBatis 配置
    # 这个配置项决定是否自动将下划线命名风格的数据库字段名转换为驼峰命名风格的 Java 属性名。
    #默认值：true（即默认开启自动转换）
    #设置为 false：表示禁用这种自动转换
    map-underscore-to-camel-case: false
    #仅在开发环境打印日志，开启调试的日志，用如下这个类去打印，兼容性会比较好一点
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDeleted #指定实体类中表示逻辑删除状态的字段名 isDeleted。数据库表中需要有对应的字段。
      logic-delete-value: 1 #当记录被"删除"时，将这个字段设置为该值（默认为1）。
      logic-not-delete-value: 0 #表示记录未被删除的值（默认为0）。
    #实际效果
    #当调用 deleteById() 等方法时，MyBatis-Plus 会自动执行 UPDATE 操作而非 DELETE，将指定字段更新为 logic-delete-value 值
    #所有查询操作（selectList() 等）会自动附加条件 WHERE isDeleted = 0，只查询未删除的记录
    enable-sql-runner: true  #使用 MyBatis Plus 的 SqlRunner，必须要开启这个配置

#接口文档配置
knife4j:
  enable: true
  openapi:
    title: 接口文档
    version: v1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.air.yunpicturebackend.controller


